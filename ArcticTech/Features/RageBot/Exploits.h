#pragma once

class CUserCmd;
typedef void(__cdecl* CL_Move_t)(float, bool);

class CExploits {
public:
	enum ExploitType {
		E_None,
		E_DoubleTap,
		E_HideShots
	};

	struct TickbaseInfo_t {
		int command_number = 0; // validate that we are not trying to change future tick
		int tickcount = 0;
		int shift = 0;
		int tickbase = 0;
		int tickbase_ack = 0;
		int tickbase_diff = 0;
		int extra_commands = 0;
		bool sent = false; // bSendPacket
	}; 

	TickbaseInfo_t tickbase_info[150];

	struct ServerClock_t {
		int command_number = 0;
		int tick = 0;
		float receive_time = 0.f;
		float receive_latency = 0.f;
	};

	ServerClock_t server_clock[150];
private:

	int defensive_ticks = 0;
	bool in_defensive = false;

	bool should_override_next_tickbase_shift = false;
	int override_next_tickbase_shift = 0;

	int max_doubletap_speed = 15;

	int teleport_cmd = 0;
	int teleport_ticks = 0;

	ExploitType exploit_type = E_None;
public:
	bool teleport_next_tick = false;
	bool shifting_tickbase = false;
	int target_tickbase_shift = 0;
	bool block_charge = false;
	bool fix_recharge = false;
	bool fixed_recharge = false;
	int charged_command = 0;
	int charged_tickbase = 0;
	bool defensive_this_tick = false;
	bool allow_defensive = false;
	bool force_charge = false;
	int shot_cmd = 0;
	float last_teleport_time = 0.f;
	int recharge_delay = 0;

	inline bool& IsShifting() { return shifting_tickbase; };
	inline float LastTeleportTime() { return last_teleport_time; };
	inline int& TargetTickbaseShift() { return target_tickbase_shift; };
	inline bool& DefenseiveThisTick() { return defensive_this_tick; };
	inline bool& AllowDefensive() { return allow_defensive; };
	inline ExploitType GetExploitType() { return exploit_type; };
	inline int GetDefensiveTicks() { return defensive_ticks; };
	inline void ForceCharge() { force_charge = true; };
	inline bool InDefensive() { return in_defensive; };

	void	UpdateServerClock(int tick);
	int		GetServerTick(int command_number);

	bool TeleportThisTick();
	bool IsHidingShot(CUserCmd* cmd);
	void FixTickbase(CUserCmd* cmd);
	bool IsCharged();
	bool	ShouldCharge();
	int		MaxTickbaseShift();
	void	HideShot();
	void	ForceTeleport();
	void	Run();
	void	HandleTeleport(CL_Move_t cl_move);
	void	DefensiveDoubletap();
	bool	ShouldBreakLC();
	bool	IsDefensiveActive();

	void	LC_OverrideTickbase(int shift);
	int		LC_TickbaseShift();
	void	Shift();

	void	PrePrediction();
	void	NetUpdate();
	void	RunCommand(CUserCmd* cmd);
	void	UpdateTickbase();
	TickbaseInfo_t* GetTickbaseInfo(int sequence) { return &tickbase_info[sequence % 150]; };
	void	AdjustPlayerTimeBase(int& tickbase, CUserCmd* cmd);
	int		GetInterpolateTick();

	void	OverrideDoubleTapSpeed(int new_Speed) { max_doubletap_speed = new_Speed; };
};

extern CExploits* Exploits;